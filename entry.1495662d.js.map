{"version":3,"sources":["entry.ts"],"names":[],"mappings":"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","file":"entry.1495662d.js","sourceRoot":"..","sourcesContent":["class PlayerContext {\n  root: HTMLElement;\n  video_element: HTMLVideoElement;\n  video_blob: Blob;\n  video_blob_url: string;\n  loading: boolean;\n  segment_duration: number;\n  segment_amplitudes: number[];\n  cutoff_amplitude: number;\n  timeline_canvas: HTMLCanvasElement;\n  normal_rate: number;\n  ff_rate: number;\n  lookahead_segments: number;\n  should_ffs: boolean[];\n  visited: boolean[];\n  skip_length: number;\n  is_mouse_down_on_timeline: boolean;\n  paused_before_mouse_down: boolean;\n  constructor(root: HTMLElement) {\n    this.root = root;\n    this.loading = false;\n    this.segment_duration = 0.1;\n    this.cutoff_amplitude = 0.007;\n    this.normal_rate = 2.0;\n    this.ff_rate = 7.0;\n    this.lookahead_segments = 20;\n    this.skip_length = 1;\n    this.timeline_canvas_mousedown = this.timeline_canvas_mousedown.bind(this);\n    this.timeline_canvas_mouseup = this.timeline_canvas_mouseup.bind(this);\n    this.timeline_canvas_mousemove = this.timeline_canvas_mousemove.bind(this);\n    this.is_mouse_down_on_timeline = false;\n    window.addEventListener(\"resize\", evt => {\n      if (this.timeline_canvas) {\n        this.render_timeline();\n      }\n    });\n    setInterval(() => {\n      this.update();\n    }, 20);\n    window.addEventListener(\"keydown\", evt => {\n      evt.preventDefault();\n      if (this.video_element) {\n        if (evt.key === \"ArrowLeft\") {\n          this.video_element.currentTime -= this.skip_length;\n        } else if (evt.key === \"ArrowRight\") {\n          this.video_element.currentTime += this.skip_length;\n        }\n      }\n    });\n    root.innerHTML = `<div class=\"file-select\">\n                        <div>Drop or select a video file.</div>\n                        <input type=\"file\">\n                      </div>`;\n    root.querySelector(\"input\").addEventListener(\"change\", evt => {\n      let files = (evt.target as any).files as FileList;\n      let file = files[0];\n      this.handle_file(file);\n    });\n  }\n\n  async handle_file(file: File) {\n    if (this.loading) {\n      return;\n    }\n    this.loading = true;\n    this.video_element = null;\n    this.video_blob = null;\n    this.video_blob_url = null;\n    this.segment_amplitudes = null;\n    this.timeline_canvas = null;\n    this.should_ffs = null;\n    this.visited = null;\n    this.root.innerHTML = `<div class=\"loading\">\n                              <div class=\"title\">Processing audio...</div>\n                              <div class=\"substep\"></div>\n                              <div class=\"progress\"><div class=\"filled\"></div></div>\n                            </div>`;\n    let progress_filled = this.root.querySelector(\".loading .progress .filled\") as HTMLElement;\n    progress_filled.style.width = \"0%\";\n    let substep_ele = this.root.querySelector(\".loading .substep\") as HTMLElement;\n\n    function update_progress(precentage: number, substep: string) {\n      progress_filled.style.width = `${Math.round(precentage * 100)}%`;\n      substep_ele.textContent = substep;\n    }\n\n    try {\n      update_progress(0, \"Initalizing audio context\");\n      this.video_element = document.createElement(\"video\");\n      this.video_blob = file;\n      this.video_blob_url = URL.createObjectURL(this.video_blob);\n      this.video_element.addEventListener(\"error\", evt => {\n        let e = this.video_element.error.message;\n        this.handle_error(e);\n      });\n      for (let ev of [\"keydown\", \"keyup\", \"keypress\"]) {\n        this.video_element.addEventListener(ev, evt => {\n          evt.preventDefault();\n        });\n      }\n      this.video_element.src = this.video_blob_url;\n      this.video_element.controls = true;\n\n      let audioctx = new AudioContext();\n      update_progress(0, \"Decoding audio\");\n      let audiobuf = await audioctx.decodeAudioData(await this.video_blob.arrayBuffer());\n      update_progress(0, \"Analyzing audio\");\n      await this.analyze_audio(audiobuf, update_progress);\n      update_progress(100, \"Building fast forward condition table\");\n      this.build_should_ff_table();\n      this.timeline_canvas = document.createElement(\"canvas\");\n      this.timeline_canvas.classList.add(\"timeline\");\n      this.timeline_canvas.addEventListener(\"mousedown\", this.timeline_canvas_mousedown);\n    } catch (e) {\n      this.handle_error(e);\n      return;\n    }\n\n    this.root.innerHTML = \"\";\n    this.root.appendChild(this.video_element);\n    this.root.appendChild(this.timeline_canvas);\n    this.render_timeline();\n    this.loading = false;\n  }\n\n  handle_error(e: Error | string) {\n    console.error(e);\n    if (this.loading) {\n      let loading_ele = this.root.querySelector(\".loading\");\n      loading_ele.classList.add(\"error\");\n      loading_ele.innerHTML = `<div class=\"title\">An error occurred.</div><div class=\"error-content\"></div>`;\n      loading_ele.querySelector(\".error-content\").textContent = e.toString();\n      this.loading = false;\n    } else {\n      this.root.innerHTML = `<div class=\"loading error\"></div>`;\n      this.loading = true;\n      this.handle_error(e);\n    }\n  }\n\n  async analyze_audio(audiobuf: AudioBuffer, update_progress: (number, string) => void) {\n    let sr = audiobuf.sampleRate;\n    let slen = audiobuf.length;\n    let segment_size = Math.ceil(this.segment_duration * sr);\n    let channal_data: Float32Array[] = [];\n    for (let c = 0; c < audiobuf.numberOfChannels; c++) {\n      channal_data.push(audiobuf.getChannelData(c));\n    }\n    let last_progress_update = performance.now();\n    let amplitudes: number[] = [];\n    const progress_update_interval = 40;\n    for (let i = 0; i < slen; i += segment_size) {\n      let max_amplitude = -Infinity;\n      for (let data of channal_data) {\n        let upper = -Infinity;\n        let lower = Infinity;\n        for (let s = i; s < i + segment_size; s++) {\n          let sample = data[s];\n          if (sample > upper) {\n            upper = sample;\n          }\n          if (sample < lower) {\n            lower = sample;\n          }\n        }\n        let amp = upper - lower;\n        if (amp > max_amplitude) {\n          max_amplitude = amp;\n        }\n      }\n      amplitudes.push(max_amplitude);\n\n      let now = performance.now();\n      if (now - last_progress_update > progress_update_interval) {\n        update_progress(i / slen, `Reading samples (${i} / ${slen})`);\n        await new Promise((resolve, _) => setTimeout(resolve, 0));\n        last_progress_update = now;\n      }\n    }\n    this.segment_amplitudes = amplitudes;\n  }\n\n  build_should_ff_table() {\n    this.should_ffs = [];\n    for (let s = 0; s < this.segment_amplitudes.length; s++) {\n      let should_ff = true;\n      for (let ss = s; ss < s + this.lookahead_segments + 1 && ss < this.segment_amplitudes.length; ss++) {\n        let amp = this.segment_amplitudes[ss];\n        if (amp > this.cutoff_amplitude) {\n          should_ff = false;\n          break;\n        }\n      }\n      this.should_ffs.push(should_ff);\n    }\n    this.visited = [];\n    for (let s = 0; s < this.should_ffs.length; s++) {\n      this.visited.push(false);\n    }\n  }\n\n  current_segment_index(): number {\n    return Math.floor(this.video_element.currentTime / this.segment_duration);\n  }\n\n  render_timeline() {\n    let dpi = window.devicePixelRatio;\n    let css_size = window.getComputedStyle(this.timeline_canvas);\n    let css_width = parseFloat(css_size.width);\n    let css_height = parseFloat(css_size.height);\n    let pixel_width = Math.floor(css_width * dpi);\n    let pixel_height = Math.floor(css_height * dpi);\n    this.timeline_canvas.width = pixel_width;\n    this.timeline_canvas.height = pixel_height;\n    let draw_ctx = this.timeline_canvas.getContext(\"2d\");\n    draw_ctx.strokeStyle = \"transparent\";\n    let csi = this.current_segment_index();\n    for (let i = 0; i < pixel_width; i++) {\n      let seg_l = Math.floor(i / pixel_width * this.segment_amplitudes.length);\n      let seg_r = Math.floor((i + 1) / pixel_width * this.segment_amplitudes.length);\n      if (seg_l >= seg_r) {\n        seg_r = seg_l + 1;\n      }\n      if (seg_r > this.segment_amplitudes.length) {\n        seg_r = this.segment_amplitudes.length;\n      }\n      if (seg_l >= this.segment_amplitudes.length) {\n        seg_l = this.segment_amplitudes.length - 1;\n      }\n      let visited = false;\n      if (csi >= seg_l && csi < seg_r) {\n        draw_ctx.fillStyle = \"red\";\n      } else {\n        let max_amp = -Infinity;\n        for (let s = seg_l; s < seg_r; s++) {\n          max_amp = Math.max(max_amp, this.segment_amplitudes[s]);\n          if (this.visited[s]) {\n            visited = true;\n          }\n        }\n        draw_ctx.fillStyle = this.color_ramp(max_amp);\n      }\n      draw_ctx.fillRect(i, 0, 1, pixel_height);\n      if (visited) {\n        draw_ctx.fillStyle = \"red\";\n        draw_ctx.fillRect(i, pixel_height / 2, 1, Math.ceil(pixel_height / 2));\n      }\n    }\n  }\n\n  color_ramp(amplitude: number): string {\n    if (amplitude > 1) {\n      amplitude = 1;\n    }\n    let grey_level = Math.round(amplitude * 255);\n    return `rgb(0, ${grey_level}, ${255 - grey_level})`;\n  }\n\n  update() {\n    if (!this.timeline_canvas || !this.video_element) {\n      return;\n    }\n    this.render_timeline();\n    let segi = this.current_segment_index();\n    if (!this.video_element.paused && this.should_ffs[segi] && !this.visited[segi]) {\n      this.video_element.playbackRate = this.ff_rate;\n    } else {\n      this.video_element.playbackRate = this.normal_rate;\n    }\n    if (!this.video_element.paused) {\n      this.visited[segi] = true;\n    }\n  }\n\n  timeline_canvas_mousedown(evt: MouseEvent) {\n    if (this.video_element === null) {\n      return;\n    }\n    window.addEventListener(\"mouseup\", this.timeline_canvas_mouseup);\n    window.addEventListener(\"mousemove\", this.timeline_canvas_mousemove);\n    evt.preventDefault();\n    this.timeline_canvas_mousemove(evt);\n    document.body.style.cursor = \"none\";\n    this.video_element.style.pointerEvents = \"none\";\n    this.paused_before_mouse_down = this.video_element.paused;\n    this.video_element.pause();\n  }\n  timeline_canvas_mouseup(evt: MouseEvent) {\n    window.removeEventListener(\"mouseup\", this.timeline_canvas_mouseup);\n    window.removeEventListener(\"mousemove\", this.timeline_canvas_mousemove);\n    document.body.style.cursor = \"\";\n    this.video_element.style.pointerEvents = \"\";\n    if (!this.paused_before_mouse_down) {\n      this.video_element.play();\n    }\n  }\n  timeline_canvas_mousemove(evt: MouseEvent) {\n    let rect = this.timeline_canvas.getBoundingClientRect();\n    let dx = evt.clientX - rect.left;\n    let w = rect.width;\n    this.video_element.currentTime = this.video_element.duration * (dx/w);\n  }\n}\n\nfunction onready(evt) {\n  if (document.readyState == \"complete\") {\n    document.removeEventListener(\"readystatechange\", onready);\n    let player_container = document.createElement(\"div\");\n    player_container.classList.add(\"player\");\n    document.body.appendChild(player_container);\n    let player = new PlayerContext(player_container);\n    init_drop_handler(player);\n  }\n}\ndocument.addEventListener(\"readystatechange\", onready);\nonready(null);\n\nfunction init_drop_handler(player: PlayerContext) {\n  let drop_indicator = document.createElement(\"div\");\n  drop_indicator.classList.add(\"drop-indicator\");\n  drop_indicator.innerHTML = `<div class=\"inner\">Release to play&hellip;</div>`;\n\n  function drop_done(evt: Event) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    drop_indicator.remove();\n  }\n\n  document.body.addEventListener(\"drop\", evt => {\n    drop_done(evt);\n    let file = evt.dataTransfer?.files[0];\n    player.handle_file(file);\n  });\n  document.body.addEventListener(\"dragenter\", evt => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    document.body.appendChild(drop_indicator);\n  });\n  document.body.addEventListener(\"dragleave\", drop_done);\n  document.body.addEventListener(\"dragend\", drop_done);\n  for (let evt of [\"dragstart\", \"dragover\", \"drag\", \"drop\"]) {\n    document.addEventListener(evt, evt => evt.preventDefault());\n  }\n}\n"]}